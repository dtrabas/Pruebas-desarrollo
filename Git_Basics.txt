
==========================================================
RESUMEN DEL eBOOK PRO GIT (https://git-scm.com/book/en/v2)
==========================================================

==============
 Introducción
==============

* Los ficheros en Git pueden estar en dos estados: tracked o untracked

	. Tracked: son los ficheros que estaban en tu último snapshot. A su vez, pueden estar en tres estados:

		- Sin modificar (commited): el fichero está guardado en tu database local 
	
		- Modificado: has cambiado el fichero pero aún no lo has añadido al stage area.
	
		- Staged: has marcado un fichero modificado para ir en tu próximo commit snapshot
		
	. Untracked: el resto de ficheros. Es decir, ficheros que no estaban en el último snapshot ni están en el stage area.
	
* Stage area

	Area que contiene los ficheros que serán commiteados en el próximo 'git commit'
	
* git init

	Situados en la carpeta que queremos que controle git, este comando creará la carpeta oculta '.git' que contendrá el esqueleto del repositorio git para esa carpeta. En este punto ningún fichero de la carpeta está trackeado todavía.
	
* git clone <url>

	Clona un repositorio existente en la carpeta en la que estamos situados. La primera vez que clonas un repositorio, todos los ficheros están tracked y sin modificar.
	
* git help <nombreComandoGit>

	Abre en el navegador por defecto la 'man page' del comando indicado
	
* git <nombreComandoGit> -h

	(ó --help)
	
	Muestra por consola los parámetros disponibles para el comando indicado.

* git status

	Muestra el estado de nuestros ficheros
	
* git status -s

	(ó --short)

	Muestra el estado de nuestros ficheros en formato reducido (el nombre del fichero precedido de dos letras):
	
		. ?? Fichero sin trackear
		. A  Fichero nuevo añadido al stage area
		. M  Fichero modificado añadido al stage area
		.  M Fichero (trackeado) modificado
		. MM Fichero (trackeado) modificado, stageado y modificado de nuevo
		. AM Fichero nuevo añadido al stage area  y modificado de nuevo 
	
* Fichero .gitignore

	Contiene los ficheros de los que no queremos que se haga tracking. Para un proyecto java típico serían:
	
		$ cat .gitignore
		.classpath
		.project
		.settings
		target/
		/bin/
		
	Si queremos omitir un tipo de archivo en todas las subcarpetas: **.tipo
			
* git add <file>

	Pasa el <file> indicado al area staged. Por tanto, si el fichero es nuevo, pasa a estar trackeado.

* git diff <parametros> <file>

	Sin parámetros: Muestra los cambios del fichero Modified (no está aún staged) respecto del fichero en el area staged ó de su último commit si no está en dicho area

	--staged: (ó --cached) Muestra los cambios del fichero en el area staged respecto de su último commit. Si también hay cambios en el fichero Modified, estos no se mostrarán.
	
	Ojo: si el fichero está en el area staged, git diff sin parámetros no mostrará ningún cambio!!!
	
* git diff <ID_DE_COMMIT_A_COMPARAR> <file>

	Muestra los cambios de los ficheros Modified/Staged respecto de ese commit. 
	
	Ojo: para las diferencias del commit SI se tiene en cuenta el area staged!!!
	
	Nota: "git diff HEAD <file>" nos mostrará todos los cambios del fichero ya esté modificado o en el stage area.
	
		
* git commit <file>

	Hace commit del <file> del staged area. Se abre el editor por defecto para escribir la descripción del commit
	
  . git commit -a
  
	(ó --all) Pasa todos los ficheros en seguimiento (tracked) al staged area (e.d. ejecuta git add ./) y después realiza el commit.
	
	Ojo: sólo tiene en cuenta los ficheros tracked. Si acabas de crear un fichero nuevo, este estará untracked y no será tenido en cuenta en el commit. Así que primero tendrás que ejecutar 'git add .' para para pasar a tracked los ficheros nuevos.
	
  . git commit -m 'descripción del commit' <file>
  
	(ó --message) Añade el fichero al stage area y ha commit del mismo. También permite indicar la descripción del commit en la misma línea de comando. 
	
  . git commit --amend

	Nos permite modificar el comentario del último commit y/o añadir el contenido del stage area a dicho commit. Este proceso reemplaza completamente el commit original de tal forma que es como si nunca se hubiera realizado.
	
	Ejecutado sin indicar el nombre del fichero que queremos añadir al commit, añadirá todos los ficheros del staged area.
	
* git rm <file>

	Borra el <file> (rm <file>) y mueve el cambio al stage area (git add <file>)
	
* git mv <file1> <file2>

	Renombra file1 a file2. 
	
	Es equivalente a ejecutar estos comandos:
	
		mv file1 file2
		git rm file1
		git add file2
	
* git log

	 Muestra los commits realizados sobre el repositorio en orden cronológico inverso, es decir, el commit mas reciente se muestra el primero.
	 
	Parámetros interesantes:
	
		--follow -- <file>	--> muestra los commits del fichero indicado

	
		-<número> 		--> muestra el número indicado de commmits
		
		-p ó --patch	-->	muestra los cambios de cada commit
		
		--stat			--> muestra por cada commit estadísticas abreviadas (ficheros modificados, resumen de cambios, etc)
		
		--pretty=oneline --> muestra un commit por línea
		
		--graph			--> Display an ASCII graph of the branch and merge history beside the log output.
		
		--since=2.days	--> Limita la salida a los commits de los últimos dos días (o weeks o years o una mezcla de todos ellos)
		
		--until, --before --> Limit the commits to those made before the specified date.

		--author 		--> Only show commits in which the author entry matches the specified string.

		--committer 	--> Only show commits in which the committer entry matches the specified string.

		--grep			--> Only show commits with a commit message containing the string

		-S	<texto>		--> Only show commits adding or removing code matching the string		
		
		--all -- <path> --> Muestra los commits que han modificado el fichero indicado
		

* git show --pretty="" --name-only  <ID_DEL_COMMIT>

	Muestra la lista de los ficheros que fueron modificados en el commit indicado
	

=============
   Remotes
=============	
	
* git remote add origin <url_repositorio_remoto>

	Añade el repositorio remoto indicado y le asigna el nombre origin
	
* git remote -v

	Muestra información de los respositorios remotos configurados para el proyecto actual
	
* git remote show <origin>

	Muestra información sobre el repositorio remoto <origin>
	
* git remote remove <nombre_repo>

	Elimina el repositorio 
	
* git remote rename <nombre_repo> <nombre_nuevo>

	Cambia el nombre del repositorio remoto
	
* git fetch <remote>

	Obtiene información de las ramas del repositorio <remote>
	
	El repositorio por defecto siempre es 'origin'
	
	Descarga la información nueva de estado que no tenemos en nuestro repositorio local (sólo estado, no descarga ficheros). Debemos ejecutarlo siempre antes de git status para estar seguros que estamos comparando el estado de nuestro repositorio local con el del remoto.
	
* git pull

	Hace un 'git fetch' seguido de un 'git merge' de la rama actual con la del respositorio remoto
	
* git push <remote> <branch>

	Sube la rama indicada al repositorio remoto.
	
=============
    Tags
=============	
	
* git tag [nombreNuevoTag]

	Muestra en orden alfabético los tags definidos ó crea un nuevo tag con el nombre indicado.
	
	Existen dos tipos de tags:
	
		. Lightweight: similar a una rama que no cambia. Básicamente es un puntero a un commit específico.
		
			git tag <nombre_tag>
		
		. Annotated: se guardan como full objects en la bbdd de Git. Tienen checksum, mensaje de tagging, email y fecha.
		
			git tag -a <nombre_tag> -m "mensaje de tagging"
			
* git show <nombre_tag>

	Muestra la información asociada al tag.
	
* git tag -l "patrón"

	Muestra los tags que cumplen el patrón indicado
	
* git tag -d <nombreTag>

	Elimina el tag especificado. No se elimina del remoto. 
	
	Para eliminarlo del repositorio remoto:
	
		git push origin :refs/tags/<nombreTag>
		
		ó
		
		git push origin --delete <nombreTag>

* git push origin <nombre_tag>

	Transfiere el tag al repositorio remoto
	
	OJO: 'git push' no transfiere por defecto tags al remoto. Hay que hacerlo explicitamente
	
* git push origin --tags

	Transfiere al repositorio todas las tags que no tenga ya
	
* git checkout <nombre_tag>

	Permite ver las versiones de los ficheros a los que apunta este tag. Pone el repositorio en estado 'detached HEAD'. En este estado hay que tener cuidado con los commits y el branching ya que funciona diferente. Mejor revisar la documentación...

=============	
  Branching
=============

	. Un commit consiste en una estructura de objetos formada por:
	
		(Usamos como ejemplo un directorio conteniendo tres archivos sobre los que hacemos stage y commit)
	
		1. Un Objeto principal del commit: contiene el nombre y email del autor, el mensaje empleado y un puntero a un objeto tree
		
		2. Un objeto tree: contiene el contenido del directorio y por cada archivo un puntero al objeto blob correspondiente
		
		3. Tres objetos blob (uno por archivo del directorio) con el contenido del archivo.
		
	. Al conjunto anterior lo llamamos Snapshot: cada vez que hacemos un commit se guarda un puntero al commit del que partió
	
	. Una rama es simplemente un puntero a un commit determinado
		
	. La rama por defecto en git es 'master'
	
* git branch <nombreRama>

	Crea una nueva rama apuntando al commit en el que estás situado (pero no cambia la rama sobre la que estás)
	
	¿ Como sabe Git la rama en la que estás ?: git mantiene un puntero especial llamado HEAD con el nombre de la rama actual (fichero ./.git/HEAD)
	
	Con este comando tienes una representación muy acertada de a donde apunta cada commit:
	
		git log --oneline --decorate
		
	Este otro muestra una referencia visual del branching:
	
		git log --oneline --decorate --graph --all
	
* git checkout <nombreRama>

	Cambia la rama actual a la rama indicada
	
	Para crear automáticamente a la nueva rama, añade el parámetro -b
	
		git checkout -b <nombreRama>
		
* git merge <nombreRama>

	Mergea los cambios de la rama indicada sobre la rama actual.
	
	Se dice que se hace Fast-Forward cuando mergeas un commit con otro commit que puede ser alcanzado siguiendo la historia del primer commit. En otras palabras, el commit de la rama que vas a mergear viene directamente del commit de la rama en la que estás.
	
	El merge será Recursive cuando el commit que mergeamos no es un descendiente directo del commit sobre el que hacemos el merge. Git Crea un nuevo snapshot a partir de los snapshot de cada commit. En este caso, se permite indicar un mensaje con el parámetro -m 'Mensaje del merge...':
	
		git merge -m 'Mensaje del merge' <nombreRama>
	
* git branch -d <nombreRama>

	Elimina la rama indicada
	
	Ojo: tienes que estar situado en una rama en la que se haya mergeado la rama que quieres borrar. En caso contrario, te sale el error 'error: The branch 'hotfix2' is not fully merged' y necesitas ejecutar el comando así ''git branch -D hotfix2'
	
	Ojo2: cuando borras la rama, ésta deja de aparecer en el SourceTree...
	
=====================
  Deshaciendo cosas	
=====================

* Hace un discard de los cambios realizados en el <file> que todavía no están en el stage area 

	git checkout -- <file>
	
* Sacar el <file> del stage area

	git reset HEAD <file>

* Deshacer merge:

	git reset --hard HEAD
	
* Deshacer el último commit (deja los ficheros commiteados como unstaged)

	git reset HEAD~1